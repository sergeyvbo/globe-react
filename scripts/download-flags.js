const fs = require('fs');
const path = require('path');
const https = require('https');
const countryCodes = require('../src/Common/GeoData/countryCodes2.json');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —Ñ–ª–∞–≥–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
const flagDirs = {
  '20x15': path.join(__dirname, '../public/flags/20x15'),
  '64x48': path.join(__dirname, '../public/flags/64x48')
};

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
Object.values(flagDirs).forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
function downloadFile(url, filepath) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(filepath);
    
    https.get(url, (response) => {
      if (response.statusCode !== 200) {
        reject(new Error(`HTTP ${response.statusCode}: ${url}`));
        return;
      }
      
      response.pipe(file);
      
      file.on('finish', () => {
        file.close();
        resolve();
      });
      
      file.on('error', (err) => {
        fs.unlink(filepath, () => {}); // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        reject(err);
      });
    }).on('error', (err) => {
      reject(err);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–ª–∞–≥–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö
async function downloadFlag(countryCode) {
  const sizes = ['20x15', '64x48'];
  
  for (const size of sizes) {
    const url = `https://flagcdn.com/${size}/${countryCode}.png`;
    const filepath = path.join(flagDirs[size], `${countryCode}.png`);
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (fs.existsSync(filepath)) {
      console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${countryCode} (${size}) - —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      continue;
    }
    
    try {
      await downloadFile(url, filepath);
      console.log(`‚úì –ó–∞–≥—Ä—É–∂–µ–Ω ${countryCode} (${size})`);
    } catch (error) {
      console.error(`‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${countryCode} (${size}):`, error.message);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function downloadAllFlags() {
  console.log(`–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É ${countryCodes.length} —Ñ–ª–∞–≥–æ–≤...`);
  
  let completed = 0;
  let errors = 0;
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–ª–∞–≥–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const batchSize = 5;
  for (let i = 0; i < countryCodes.length; i += batchSize) {
    const batch = countryCodes.slice(i, i + batchSize);
    
    await Promise.allSettled(
      batch.map(async (country) => {
        try {
          await downloadFlag(country.code);
          completed++;
        } catch (error) {
          errors++;
          console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${country.code}:`, error.message);
        }
      })
    );
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log(`\n–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
  console.log(`‚úì –£—Å–ø–µ—à–Ω–æ: ${completed}`);
  console.log(`‚úó –û—à–∏–±–æ–∫: ${errors}`);
  console.log(`üìÅ –§–ª–∞–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: public/flags/`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
downloadAllFlags().catch(console.error);