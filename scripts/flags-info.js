const fs = require('fs');
const path = require('path');

function getDirectorySize(dirPath) {
  let totalSize = 0;
  let fileCount = 0;
  
  if (!fs.existsSync(dirPath)) {
    return { size: 0, count: 0 };
  }
  
  const files = fs.readdirSync(dirPath);
  
  for (const file of files) {
    const filePath = path.join(dirPath, file);
    const stats = fs.statSync(filePath);
    
    if (stats.isFile()) {
      totalSize += stats.size;
      fileCount++;
    }
  }
  
  return { size: totalSize, count: fileCount };
}

function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function showFlagsInfo() {
  const flagsDir = path.join(__dirname, '../public/flags');
  
  console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–ª–∞–≥–∞—Ö\n');
  
  if (!fs.existsSync(flagsDir)) {
    console.log('‚ùå –ü–∞–ø–∫–∞ —Å —Ñ–ª–∞–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run download-flags');
    return;
  }
  
  const sizes = ['20x15', '64x48'];
  let totalSize = 0;
  let totalFiles = 0;
  
  for (const size of sizes) {
    const sizeDir = path.join(flagsDir, size);
    const { size: dirSize, count: fileCount } = getDirectorySize(sizeDir);
    
    totalSize += dirSize;
    totalFiles += fileCount;
    
    console.log(`üìÅ ${size}:`);
    console.log(`   –§–∞–π–ª–æ–≤: ${fileCount}`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${formatBytes(dirSize)}\n`);
  }
  
  console.log('=' .repeat(30));
  console.log(`üìä –ò—Ç–æ–≥–æ:`);
  console.log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
  console.log(`   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${formatBytes(totalSize)}`);
  console.log(`   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${formatBytes(totalSize / totalFiles)}`);
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
  const avgRequestTime = 200; // –º—Å
  const totalRequestTime = totalFiles * avgRequestTime;
  
  console.log(`\n‚ö° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è:`);
  console.log(`   –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: ~${(totalRequestTime / 1000).toFixed(1)} —Å–µ–∫ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Ñ–ª–∞–≥–æ–≤`);
  console.log(`   –†–∞–±–æ—Ç–∞ –æ—Ñ—Ñ–ª–∞–π–Ω: ‚úÖ`);
  console.log(`   –°—Ç–∞–±–∏–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ‚úÖ`);
}

showFlagsInfo();