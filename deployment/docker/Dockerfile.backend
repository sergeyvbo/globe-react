# Multi-stage build for .NET API
# Stage 1: Build the application
FROM mcr.microsoft.com/dotnet/sdk:10.0-alpine AS build

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache \
    ca-certificates \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /src

# Copy project files
COPY backend/GeoQuizApi/GeoQuizApi.csproj backend/GeoQuizApi/
COPY backend/GeoQuizApi.Tests/GeoQuizApi.Tests.csproj backend/GeoQuizApi.Tests/

# Restore dependencies
RUN dotnet restore backend/GeoQuizApi/GeoQuizApi.csproj

# Copy source code
COPY backend/ .

# Build the application
WORKDIR /src/GeoQuizApi
RUN dotnet build GeoQuizApi.csproj -c Release -o /app/build

# Stage 2: Publish the application
FROM build AS publish
RUN dotnet publish GeoQuizApi.csproj -c Release -o /app/publish \
    --self-contained false \
    --no-restore \
    /p:PublishTrimmed=false \
    /p:PublishSingleFile=false

# Stage 3: Runtime image
FROM mcr.microsoft.com/dotnet/aspnet:10.0-alpine AS runtime

# Install security updates and required packages
RUN apk update && apk upgrade && apk add --no-cache \
    ca-certificates \
    curl \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S appuser && \
    adduser -S -D -H -u 1001 -h /app -s /sbin/nologin -G appuser -g appuser appuser

# Set working directory
WORKDIR /app

# Copy published application
COPY --from=publish /app/publish .

# Create directories for application data
RUN mkdir -p /app/logs /app/data && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 5000

# Environment variables
ENV ASPNETCORE_ENVIRONMENT=Production
ENV ASPNETCORE_URLS=http://+:5000
ENV DOTNET_RUNNING_IN_CONTAINER=true
ENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Entry point
ENTRYPOINT ["dotnet", "GeoQuizApi.dll"]