version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:16-alpine
    container_name: geoquiz-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-geoquiz}
      POSTGRES_USER: ${DB_USER:-geoquiz_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-geoquiz_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - geoquiz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-geoquiz_user} -d ${DB_NAME:-geoquiz}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # .NET Backend API
  backend:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.backend
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: geoquiz-backend
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
      ASPNETCORE_URLS: http://+:5000
      ConnectionStrings__DefaultConnection: "Host=database;Port=5432;Database=${DB_NAME:-geoquiz};Username=${DB_USER:-geoquiz_user};Password=${DB_PASSWORD:-geoquiz_password}"
      JwtSettings__SecretKey: ${JWT_SECRET_KEY}
      JwtSettings__Issuer: ${JWT_ISSUER:-geoquiz-api}
      JwtSettings__Audience: ${JWT_AUDIENCE:-geoquiz-app}
      JwtSettings__ExpirationMinutes: ${JWT_EXPIRATION_MINUTES:-60}
      CorsSettings__AllowedOrigins__0: ${FRONTEND_URL:-http://localhost:3000}
      SecuritySettings__EnforceHttps: ${ENFORCE_HTTPS:-false}
      SecuritySettings__EnableHsts: ${ENABLE_HSTS:-false}
      Serilog__MinimumLevel__Default: ${LOG_LEVEL:-Information}
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - geoquiz-network
    volumes:
      - backend_logs:/app/logs
      - backend_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp

  # React Frontend with Nginx
  frontend:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.frontend
      args:
        BUILDKIT_INLINE_CACHE: 1
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000/api}
    container_name: geoquiz-frontend
    restart: unless-stopped
    environment:
      NGINX_HOST: ${NGINX_HOST:-localhost}
      NGINX_PORT: ${NGINX_PORT:-80}
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - geoquiz-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
    name: geoquiz_postgres_data
  backend_logs:
    driver: local
    name: geoquiz_backend_logs
  backend_data:
    driver: local
    name: geoquiz_backend_data

# Custom network for service communication
networks:
  geoquiz-network:
    driver: bridge
    name: geoquiz-network
    ipam:
      config:
        - subnet: 172.20.0.0/16