version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:16-alpine
    container_name: ${DOCKER_NAMESPACE:-geoquiz}-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-geoquiz}
      POSTGRES_USER: ${DB_USER:-geoquiz_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-geoquiz_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - geoquiz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-geoquiz_user} -d ${DB_NAME:-geoquiz}"]
      interval: ${HEALTH_CHECK_INTERVAL:-10s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-5s}
      retries: ${HEALTH_CHECK_RETRIES:-5}
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    deploy:
      resources:
        limits:
          cpus: ${DB_CPU_LIMIT:-1.0}
          memory: ${DB_MEMORY_LIMIT:-1G}
        reservations:
          cpus: '0.25'
          memory: 256M
    labels:
      - "com.geoquiz.service=database"
      - "com.geoquiz.environment=${ASPNETCORE_ENVIRONMENT:-Production}"

  # .NET Backend API
  backend:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.backend
      args:
        BUILDKIT_INLINE_CACHE: 1
      target: runtime
    image: ${DOCKER_REGISTRY}${DOCKER_REGISTRY:+/}${DOCKER_NAMESPACE:-geoquiz}/backend:${DOCKER_TAG:-latest}
    container_name: ${DOCKER_NAMESPACE:-geoquiz}-backend
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
      ASPNETCORE_URLS: http://+:5000
      # Service discovery - use service names for internal communication
      ConnectionStrings__DefaultConnection: "Host=database;Port=5432;Database=${DB_NAME:-geoquiz};Username=${DB_USER:-geoquiz_user};Password=${DB_PASSWORD:-geoquiz_password}"
      # Service discovery configuration
      ServiceDiscovery__DatabaseHost: database
      ServiceDiscovery__DatabasePort: 5432
      JwtSettings__SecretKey: ${JWT_SECRET_KEY}
      JwtSettings__Issuer: ${JWT_ISSUER:-geoquiz-api}
      JwtSettings__Audience: ${JWT_AUDIENCE:-geoquiz-app}
      JwtSettings__ExpirationMinutes: ${JWT_EXPIRATION_MINUTES:-60}
      CorsSettings__AllowedOrigins__0: ${FRONTEND_URL:-http://localhost:3000}
      SecuritySettings__EnforceHttps: ${ENFORCE_HTTPS:-false}
      SecuritySettings__EnableHsts: ${ENABLE_HSTS:-false}
      Serilog__MinimumLevel__Default: ${LOG_LEVEL:-Information}
      # Additional environment-specific settings
      SwaggerSettings__Enabled: ${ENABLE_SWAGGER:-false}
      CorsSettings__AllowAllOrigins: ${ENABLE_CORS_ALL_ORIGINS:-false}
      ErrorHandling__ShowDetailedErrors: ${ENABLE_DETAILED_ERRORS:-false}
      # Service discovery and environment injection
      DOCKER_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
      CONTAINER_NAME: ${DOCKER_NAMESPACE:-geoquiz}-backend
      SERVICE_NAME: backend
      SERVICE_VERSION: ${DOCKER_TAG:-latest}
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - geoquiz-network
    volumes:
      - backend_logs:/app/logs
      - backend_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          cpus: ${BACKEND_CPU_LIMIT:-2.0}
          memory: ${BACKEND_MEMORY_LIMIT:-2G}
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    labels:
      - "com.geoquiz.service=backend"
      - "com.geoquiz.environment=${ASPNETCORE_ENVIRONMENT:-Production}"

  # React Frontend with Nginx
  frontend:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.frontend
      args:
        BUILDKIT_INLINE_CACHE: 1
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000/api}
        NODE_ENV: ${NODE_ENV:-production}
    image: ${DOCKER_REGISTRY}${DOCKER_REGISTRY:+/}${DOCKER_NAMESPACE:-geoquiz}/frontend:${DOCKER_TAG:-latest}
    container_name: ${DOCKER_NAMESPACE:-geoquiz}-frontend
    restart: unless-stopped
    environment:
      NGINX_HOST: ${NGINX_HOST:-localhost}
      NGINX_PORT: ${NGINX_PORT:-80}
      # Service discovery configuration
      BACKEND_SERVICE_NAME: backend
      BACKEND_SERVICE_PORT: 5000
      SERVICE_NAME: frontend
      DOCKER_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - geoquiz-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-3s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          cpus: ${FRONTEND_CPU_LIMIT:-1.0}
          memory: ${FRONTEND_MEMORY_LIMIT:-512M}
        reservations:
          cpus: '0.1'
          memory: 128M
    labels:
      - "com.geoquiz.service=frontend"
      - "com.geoquiz.environment=${ASPNETCORE_ENVIRONMENT:-Production}"

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
    name: ${DOCKER_NAMESPACE:-geoquiz}_postgres_data
    labels:
      - "com.geoquiz.volume=database"
      - "com.geoquiz.environment=${ASPNETCORE_ENVIRONMENT:-Production}"
  backend_logs:
    driver: local
    name: ${DOCKER_NAMESPACE:-geoquiz}_backend_logs
    labels:
      - "com.geoquiz.volume=backend-logs"
      - "com.geoquiz.environment=${ASPNETCORE_ENVIRONMENT:-Production}"
  backend_data:
    driver: local
    name: ${DOCKER_NAMESPACE:-geoquiz}_backend_data
    labels:
      - "com.geoquiz.volume=backend-data"
      - "com.geoquiz.environment=${ASPNETCORE_ENVIRONMENT:-Production}"

# Custom network for service communication
networks:
  geoquiz-network:
    driver: bridge
    name: ${DOCKER_NAMESPACE:-geoquiz}-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    labels:
      - "com.geoquiz.network=main"
      - "com.geoquiz.environment=${ASPNETCORE_ENVIRONMENT:-Production}"