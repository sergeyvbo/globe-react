# Production configuration for Docker Compose
version: '3.8'

services:
  # Production database configuration
  database:
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    # Don't expose database port in production
    ports: []
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups:rw
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production backend configuration
  backend:
    restart: always
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionStrings__DefaultConnection: "Host=database;Port=5432;Database=${DB_NAME};Username=${DB_USER};Password=${DB_PASSWORD};SSL Mode=Prefer;Trust Server Certificate=true"
      JwtSettings__SecretKey: ${JWT_SECRET_KEY}
      JwtSettings__Issuer: ${JWT_ISSUER}
      JwtSettings__Audience: ${JWT_AUDIENCE}
      JwtSettings__ExpirationMinutes: ${JWT_EXPIRATION_MINUTES:-60}
      CorsSettings__AllowedOrigins__0: ${FRONTEND_URL}
      SecuritySettings__EnforceHttps: true
      SecuritySettings__EnableHsts: true
      Serilog__MinimumLevel__Default: Warning
    # Don't expose backend port directly in production (use reverse proxy)
    ports: []
    volumes:
      - backend_prod_logs:/app/logs
      - backend_prod_data:/app/data
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Production frontend configuration
  frontend:
    restart: always
    build:
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
    environment:
      NGINX_HOST: ${DOMAIN_NAME}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # SSL certificates (if using Let's Encrypt or similar)
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Reverse proxy/Load balancer (optional)
  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: geoquiz-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_proxy_cache:/var/cache/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - geoquiz-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

# Production volumes with backup considerations
volumes:
  postgres_prod_data:
    driver: local
    name: geoquiz_postgres_prod_data
    driver_opts:
      type: none
      o: bind
      device: /var/lib/geoquiz/postgres
  backend_prod_logs:
    driver: local
    name: geoquiz_backend_prod_logs
    driver_opts:
      type: none
      o: bind
      device: /var/log/geoquiz/backend
  backend_prod_data:
    driver: local
    name: geoquiz_backend_prod_data
    driver_opts:
      type: none
      o: bind
      device: /var/lib/geoquiz/backend
  nginx_cache:
    driver: local
    name: geoquiz_nginx_cache
  nginx_proxy_cache:
    driver: local
    name: geoquiz_nginx_proxy_cache