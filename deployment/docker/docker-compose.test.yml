# Testing configuration for Docker Compose
# Use with: docker-compose -f docker-compose.yml -f docker-compose.test.yml up
version: '3.8'

services:
  # Test database with test data
  database:
    environment:
      POSTGRES_DB: ${DB_NAME:-geoquiz_test}
      POSTGRES_USER: ${DB_USER:-test_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-test_password}
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
      - ./test-data:/test-data:ro

  # Backend with test configuration
  backend:
    environment:
      ASPNETCORE_ENVIRONMENT: Testing
      ConnectionStrings__DefaultConnection: "Host=database;Port=5432;Database=${DB_NAME:-geoquiz_test};Username=${DB_USER:-test_user};Password=${DB_PASSWORD:-test_password}"
      SwaggerSettings__Enabled: true
      CorsSettings__AllowAllOrigins: true
      ErrorHandling__ShowDetailedErrors: true
      Serilog__MinimumLevel__Default: Debug
    volumes:
      - backend_test_logs:/app/logs
      - backend_test_data:/app/data

  # Frontend with test configuration
  frontend:
    build:
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://backend:5000/api}
        NODE_ENV: test
    volumes:
      - frontend_test_cache:/tmp/nginx

  # Backend test runner
  backend-tests:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.backend
      target: build
    container_name: ${DOCKER_NAMESPACE:-geoquiz}-backend-tests
    environment:
      ASPNETCORE_ENVIRONMENT: Testing
      ConnectionStrings__DefaultConnection: "Host=database;Port=5432;Database=${DB_NAME:-geoquiz_test};Username=${DB_USER:-test_user};Password=${DB_PASSWORD:-test_password}"
    command: ["dotnet", "test", "/src/GeoQuizApi.Tests", "--logger", "console", "--verbosity", "normal"]
    depends_on:
      database:
        condition: service_healthy
    networks:
      - geoquiz-network
    volumes:
      - backend_test_results:/app/test-results
    profiles:
      - test

  # Frontend test runner
  frontend-tests:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.frontend
      target: builder
    container_name: ${DOCKER_NAMESPACE:-geoquiz}-frontend-tests
    environment:
      CI: true
      REACT_APP_API_URL: http://backend:5000/api
    command: ["npm", "test", "--", "--coverage", "--watchAll=false"]
    networks:
      - geoquiz-network
    volumes:
      - frontend_test_results:/app/coverage
    profiles:
      - test

  # End-to-end test runner (placeholder for future implementation)
  e2e-tests:
    image: cypress/included:latest
    container_name: ${DOCKER_NAMESPACE:-geoquiz}-e2e-tests
    environment:
      CYPRESS_baseUrl: http://frontend:80
      CYPRESS_apiUrl: http://backend:5000/api
    working_dir: /e2e
    volumes:
      - ../../cypress:/e2e:ro
      - e2e_test_results:/e2e/cypress/screenshots
      - e2e_test_results:/e2e/cypress/videos
    depends_on:
      - frontend
      - backend
    networks:
      - geoquiz-network
    profiles:
      - test
      - e2e

# Test volumes
volumes:
  postgres_test_data:
    driver: local
    name: ${DOCKER_NAMESPACE:-geoquiz}_postgres_test_data
  backend_test_logs:
    driver: local
    name: ${DOCKER_NAMESPACE:-geoquiz}_backend_test_logs
  backend_test_data:
    driver: local
    name: ${DOCKER_NAMESPACE:-geoquiz}_backend_test_data
  backend_test_results:
    driver: local
    name: ${DOCKER_NAMESPACE:-geoquiz}_backend_test_results
  frontend_test_cache:
    driver: local
    name: ${DOCKER_NAMESPACE:-geoquiz}_frontend_test_cache
  frontend_test_results:
    driver: local
    name: ${DOCKER_NAMESPACE:-geoquiz}_frontend_test_results
  e2e_test_results:
    driver: local
    name: ${DOCKER_NAMESPACE:-geoquiz}_e2e_test_results