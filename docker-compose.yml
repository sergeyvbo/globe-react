services:
  # Frontend service - React app served by nginx
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: geoquiz-frontend
    ports:
      - "8080:80"
      - "6666:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - geoquiz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Backend service - .NET API
  backend:
    build:
      context: ./backend/GeoQuizApi
      dockerfile: Dockerfile
    container_name: geoquiz-backend
    expose:
      - "5000"
    volumes:
      - sqlite-data:/app/data
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://*:5000
      - ConnectionStrings__DefaultConnection=Data Source=/app/data/geoquiz.db
      - JwtSettings__SecretKey=${JWT_SECRET_KEY:-your-super-secret-jwt-key-that-is-at-least-32-characters-long}
      - CorsSettings__AllowedOrigins__0=https://geoquiz.sergeivbo.ru
      - CorsSettings__AllowedOrigins__1=http://10.66.66.64:6666
      - CorsSettings__AllowedOrigins__2=http://localhost:8080
      - CorsSettings__AllowedOrigins__3=http://localhost:6666
      - SecuritySettings__EnforceHttps=false
      - SecuritySettings__EnableHsts=false
      - SecuritySettings__RateLimit__AuthEndpointsPerMinute=20
      - SecuritySettings__RateLimit__GeneralEndpointsPerMinute=200
      - SecuritySettings__RateLimit__WindowSizeMinutes=1
      # Настройки для работы за прокси
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true
      - AllowedHosts=*
      - ASPNETCORE_PATHBASE=
      - ASPNETCORE_FORWARDEDHEADERS_FORWARDEDPROTOHEADERNAME=X-Forwarded-Proto
      - ASPNETCORE_FORWARDEDHEADERS_FORWARDEDHOSTHEADERNAME=X-Forwarded-Host
    networks:
      - geoquiz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # SonarQube service for code quality analysis
  sonarqube:
    image: sonarqube:community
    container_name: geoquiz-sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://sonarqube-db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    depends_on:
      sonarqube-db:
        condition: service_healthy
    networks:
      - geoquiz-network
      - sonar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # PostgreSQL database for SonarQube
  sonarqube-db:
    image: postgres:13
    container_name: geoquiz-sonarqube-db
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - sonar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar -d sonar"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

# Named volumes for data persistence
volumes:
  sqlite-data:
    driver: local
    name: geoquiz-sqlite-data
  sonarqube_data:
    driver: local
    name: geoquiz-sonarqube-data
  sonarqube_logs:
    driver: local
    name: geoquiz-sonarqube-logs
  sonarqube_extensions:
    driver: local
    name: geoquiz-sonarqube-extensions
  postgresql_data:
    driver: local
    name: geoquiz-postgresql-data

# Internal networks for container communication
networks:
  geoquiz-network:
    driver: bridge
    name: geoquiz-network
  sonar-network:
    driver: bridge
    name: geoquiz-sonar-network